generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  oauthId          String           @unique @map("oauth_id")
  nickname         String
  profileUrl       String           @map("profile_url")
  role             Role             @default(MEMBER)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  status           UserStatus       @default(ACTIVATE)
  boardGameReplies BoardGameReply[]
  boardGameScores  BoardGameScore[]

  @@map("user")
}

model BoardGame {
  id                 Int              @id @default(autoincrement())
  name               String
  description        String           @db.VarChar(2000)
  thumbnailUrl       String           @map("thumbnail_url")
  designer           String
  difficulty         Float
  personnel          String
  recommendPersonnel String           @map("recommend_personnel")
  playTime           Int
  age                Int
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  boardGameGenres    BoardGameGenre[]
  boardGameReplies   BoardGameReply[]
  boardGameScores    BoardGameScore[]

  @@map("board_game")
}

model BoardGameGenre {
  id          Int       @id @default(autoincrement())
  boardGameId Int       @map("board_game_id")
  genreId     Int       @map("genre_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  genre       Genre     @relation(fields: [genreId], references: [id])

  @@index([boardGameId], map: "board_game_genre_board_game_id_fkey")
  @@index([genreId], map: "board_game_genre_genre_id_fkey")
  @@map("board_game_genre")
}

model Genre {
  id               Int              @id @default(autoincrement())
  code             String           @unique
  name             String
  order            Int
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  boardGameGeneres BoardGameGenre[]

  @@map("genre")
}

model BoardGameScore {
  id          Int       @id @default(autoincrement())
  score       Int
  userId      Int       @map("user_id")
  boardGameId Int       @map("board_game_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  comment     String    @db.VarChar(2000)
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([boardGameId], map: "board_game_score_board_game_id_fkey")
  @@index([userId], map: "board_game_score_user_id_fkey")
  @@map("board_game_score")
}

model BoardGameReply {
  id          Int       @id @default(autoincrement())
  content     String
  userId      Int       @map("user_id")
  boardGameId Int       @map("board_game_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([boardGameId], map: "board_game_reply_board_game_id_fkey")
  @@index([userId], map: "board_game_reply_user_id_fkey")
  @@map("board_game_reply")
}

enum Role {
  ADMIN
  MEMBER
}

enum UserStatus {
  ACTIVATE
  BLOCK
  DORMANT
  WITHDRAWAL
}
